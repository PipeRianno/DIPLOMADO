{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7eba2262",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-13 08:38:52.597 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-13 08:38:53.725 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run c:\\Users\\juanF\\miniconda3\\envs\\Diplomado_env\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-08-13 08:38:53.727 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-13 08:38:53.728 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-13 08:38:54.919 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-13 08:38:54.920 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-13 08:38:54.922 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "# archivo: validador_reversiones.py\n",
    "import pandas as pd\n",
    "import re\n",
    "import streamlit as st\n",
    "from datetime import datetime\n",
    "from pathlib import Path\n",
    "\n",
    "# === CONFIGURACIÓN ===\n",
    "ARCHIVO = Path.home() / \"Downloads\" / \"Prueba Técnica - Analista III Departamento de Aceptación.xlsx\"\n",
    "HOJA = \"Solicitudes de los Comercios\"\n",
    "\n",
    "# Columnas esperadas\n",
    "COLUMNAS_ESPERADAS = [\n",
    "    \"NOMBRE COMERCIO\",\n",
    "    \"TIPO DE REVERSIÓN (TOTAL - PARCIAL)\",\n",
    "    \"NIT COMERCIO SIN SEPARACIÓN (INLCUYENDO DÍGITO DE VERIFICACIÓN)\",\n",
    "    \"CÓDIGO ÚNICO (8 DÍGITOS)\",\n",
    "    \"FECHA TRANSACCIÓN AAAAMMDD\",\n",
    "    \"4 ÚLLTIMOS DE LA TARJETA (4 digitos)\",\n",
    "    \"FRANQUICIA (DINERS, VISA, MASTER)\",\n",
    "    \"CÓDIGO AUTORIZACIÓN (6 digitos)\",\n",
    "    \"CAMPO EXCLUSIVO DE DAVIVIENDA\",\n",
    "    \"CAMPO EXCLUSIVO DE DAVIVIENDA\",\n",
    "    \"VR COMPRA\",\n",
    "    \"VR DE IVA\",\n",
    "    \"IMP NAC CONSUMO\",\n",
    "    \"VR PROPINA\",\n",
    "    \"TOTAL VENTA \\n(CAMPO FORMULADO)\",\n",
    "    \"(APICA SOLO PARA AJUSTES PARCIALES) \\n\\nVR NUEVA COMPRA\",\n",
    "    \"(APLICA SOLO PARA AJUSTES PARCIALES) \\n\\nVR DE IVA\",\n",
    "    \"(APLICA SOLO PARA AJUSTES PARCIALES) \\n\\nIMP NAC CONSUMO\",\n",
    "    \"(APLICA SOLO PARA AJUSTES PARCIALES) \\n\\nVR PROPINA\",\n",
    "    \"(APLICA SOLO PARA AJUSTES PARCIALES) \\nVR TOTAL NUEVAVENTA \\n(CAMPO FORMULADO)\",\n",
    "    \"(APLICA SOLO PARA AJUSTES PARCIALES) \\n\\nVR A REVERSAR\",\n",
    "    \"Correo que remite la solicitud\"\n",
    "]\n",
    "\n",
    "# === Funciones de validación ===\n",
    "def validar_nit(valor):\n",
    "    return bool(re.fullmatch(r\"\\d+\", str(valor)))\n",
    "\n",
    "def validar_codigo_unico(valor):\n",
    "    return bool(re.fullmatch(r\"\\d{8}\", str(valor)))\n",
    "\n",
    "def validar_fecha(valor):\n",
    "    try:\n",
    "        datetime.strptime(str(valor), \"%Y%m%d\")\n",
    "        return True\n",
    "    except:\n",
    "        return False\n",
    "\n",
    "def validar_ultimos_tarjeta(valor):\n",
    "    return bool(re.fullmatch(r\"\\d{4}\", str(valor)))\n",
    "\n",
    "def validar_franquicia(valor):\n",
    "    return str(valor).upper() in [\"DINERS\", \"VISA\", \"MASTER\"]\n",
    "\n",
    "def validar_codigo_autorizacion(valor):\n",
    "    return bool(re.fullmatch(r\"\\d{6}\", str(valor)))\n",
    "\n",
    "def validar_valor(valor):\n",
    "    try:\n",
    "        float(valor)\n",
    "        return True\n",
    "    except:\n",
    "        return False\n",
    "\n",
    "def validar_correo(valor):\n",
    "    return bool(re.fullmatch(r\"[^@]+@[^@]+\\.[^@]+\", str(valor)))\n",
    "\n",
    "# === Cargar y validar ===\n",
    "st.title(\"Validador de Formato - Solicitudes de Reversión\")\n",
    "\n",
    "if not ARCHIVO.exists():\n",
    "    st.error(f\"No se encontró el archivo en {ARCHIVO}\")\n",
    "else:\n",
    "    df = pd.read_excel(ARCHIVO, sheet_name=HOJA)\n",
    "\n",
    "    # Validar columnas\n",
    "    columnas_archivo = list(df.columns)\n",
    "    faltantes = [col for col in COLUMNAS_ESPERADAS if col not in columnas_archivo]\n",
    "\n",
    "    if faltantes:\n",
    "        st.error(f\"Columnas faltantes: {faltantes}\")\n",
    "    else:\n",
    "        errores = []\n",
    "\n",
    "        for idx, fila in df.iterrows():\n",
    "            fila_errores = {}\n",
    "\n",
    "            if not validar_nit(fila[COLUMNAS_ESPERADAS[2]]):\n",
    "                fila_errores[\"NIT COMERCIO\"] = \"Formato inválido\"\n",
    "\n",
    "            if not validar_codigo_unico(fila[COLUMNAS_ESPERADAS[3]]):\n",
    "                fila_errores[\"CÓDIGO ÚNICO\"] = \"Debe tener 8 dígitos\"\n",
    "\n",
    "            if not validar_fecha(fila[COLUMNAS_ESPERADAS[4]]):\n",
    "                fila_errores[\"FECHA TRANSACCIÓN\"] = \"Formato AAAAMMDD inválido\"\n",
    "\n",
    "            if not validar_ultimos_tarjeta(fila[COLUMNAS_ESPERADAS[5]]):\n",
    "                fila_errores[\"4 ÚLTIMOS TARJETA\"] = \"Debe tener 4 dígitos\"\n",
    "\n",
    "            if not validar_franquicia(fila[COLUMNAS_ESPERADAS[6]]):\n",
    "                fila_errores[\"FRANQUICIA\"] = \"Debe ser DINERS, VISA o MASTER\"\n",
    "\n",
    "            if not validar_codigo_autorizacion(fila[COLUMNAS_ESPERADAS[7]]):\n",
    "                fila_errores[\"CÓDIGO AUTORIZACIÓN\"] = \"Debe tener 6 dígitos\"\n",
    "\n",
    "            if not validar_valor(fila[COLUMNAS_ESPERADAS[10]]):\n",
    "                fila_errores[\"VR COMPRA\"] = \"Debe ser numérico\"\n",
    "\n",
    "            if not validar_correo(fila[COLUMNAS_ESPERADAS[-1]]):\n",
    "                fila_errores[\"Correo\"] = \"Formato inválido\"\n",
    "\n",
    "            if fila_errores:\n",
    "                errores.append({\"Fila\": idx + 2, **fila_errores})\n",
    "\n",
    "        if errores:\n",
    "            st.warning(f\"Se encontraron {len(errores)} registros con errores\")\n",
    "            df_errores = pd.DataFrame(errores)\n",
    "            st.dataframe(df_errores)\n",
    "\n",
    "            # Descargar errores\n",
    "            csv = df_errores.to_csv(index=False).encode(\"utf-8\")\n",
    "            st.download_button(\"Descargar errores en CSV\", csv, \"errores.csv\", \"text/csv\")\n",
    "        else:\n",
    "            st.success(\"✅ Todos los registros cumplen con el formato\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Diplomado_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
